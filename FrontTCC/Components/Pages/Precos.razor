@page "/precos"
@rendermode InteractiveServer

@using System.Net.Http.Json
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject IJSRuntime JS
@inject ApiService ApiService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Preços</h3>

<Alert @bind-Visible="showAlert" Color="@alertColor">
    @alertMessage
    <CloseButton />
</Alert>

@if (permissao == "1")
{
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>#</th>
                <th>Nome do Entregador</th>
                <th>Tipos de Entrega</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @if (entregadores != null && entregas != null)
            {
                int index = 1;
                foreach (var entregador in entregadores)
                {
                    <tr>
                        <td><strong>@index</strong></td>
                        <td>@entregador.Nome @entregador.Sobrenome</td>
                        <td>
                            <div class="entregas-wrapper">
                                @foreach (var grupo in entregasAgrupadas)
                                {
                                    <div>
                                        <label>@grupo.Key</label>
                                        <select @onchange="@(e => OnEntregaChange(entregador.Id, grupo.Key, decimal.Parse(e?.Value?.ToString() ?? "0")))">

                                            @foreach (var entrega in grupo)
                                            {
                                                <option value="@entrega.Valor" selected="@(IsSelected(entregador.Id, entrega.Id) ? "selected" : null)">
                                                    @entrega.Valor.ToString("F2")
                                                </option>
                                            }
                                        </select>
                                    </div>
                                }
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="@(async () => await SaveMudanca(entregador.Id))">Salvar</button>
                        </td>
                    </tr>
                    index++;
                }
            }
        </tbody>
    </table>
}
else
{
    <p>Você não tem permissão para acessar esta página.</p>
}

@code {
    private List<Entregador> entregadores = new List<Entregador>();
    private List<Entrega> entregas = new List<Entrega>();
    private List<EntregadorEntrega> entregadorEntregaAssociations = new List<EntregadorEntrega>();
    private Dictionary<int, Dictionary<string, decimal>> selectedValues = new Dictionary<int, Dictionary<string, decimal>>();

    private string token = string.Empty;
    private string permissao = string.Empty;

    private IEnumerable<IGrouping<string?, Entrega>> entregasAgrupadas => entregas.GroupBy(e => e.Nome);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Obtenha a permissão do usuário a partir das claims
            permissao = user.FindFirst(c => c.Type == "permissao")?.Value;

            if (permissao == "1")
            {
                await LoadEntregadores();
                await LoadEntregas();
                await LoadAssociations();
            }

            StateHasChanged(); // Força a atualização do componente após a inicialização
        }
    }

    private async Task LoadEntregadores()
    {
        try
        {
            entregadores = await ApiService.GetDataAsync<List<Entregador>>("api/Entregador/entregadores") ?? new List<Entregador>();
            entregadores = entregadores.Where(e => e.Situacao).ToList(); // Filtrar apenas entregadores ativos
            entregadores = entregadores.OrderBy(e => e.Nome).ToList();
        }
        catch (Exception ex)
        {
            ShowAlert($"Erro ao carregar entregadores!", Color.Danger);
        }
    }

    private async Task LoadEntregas()
    {
        try
        {
            entregas = await ApiService.GetDataAsync<List<Entrega>>("api/Entrega/entregas") ?? new List<Entrega>();
            entregas = entregas.Where(e => e.Situacao).ToList(); // Filtrar apenas entregas ativas
            entregas = entregas.OrderBy(e => e.Nome).ThenBy(e => e.Valor).ToList();
        }
        catch (Exception ex)
        {
            ShowAlert($"Erro ao carregar entregas!", Color.Danger);
        }
    }

    private async Task LoadAssociations()
    {
        try
        {
            entregadorEntregaAssociations = await ApiService.GetDataAsync<List<EntregadorEntrega>>("api/EntrEnt/entregador_entrega") ?? new List<EntregadorEntrega>();
        }
        catch (Exception ex)
        {
            ShowAlert($"Erro ao carregar associações!", Color.Danger);
        }
    }

    public void OnEntregaChange(int entregadorId, string entregaNome, decimal novoValor)
    {
        if (!selectedValues.ContainsKey(entregadorId))
        {
            selectedValues[entregadorId] = new Dictionary<string, decimal>();
        }
        selectedValues[entregadorId][entregaNome] = novoValor;
    }

    private async Task SaveMudanca(int entregadorId)
    {
        try
        {
            if (selectedValues.ContainsKey(entregadorId))
            {
                foreach (var kvp in selectedValues[entregadorId])
                {
                    var entregaNome = kvp.Key;
                    var novoValor = kvp.Value;

                    // Encontrar a entrega correspondente pelo nome e valor
                    var entrega = entregas.FirstOrDefault(e => e.Nome == entregaNome && e.Valor == novoValor);
                    if (entrega != null)
                    {
                        // Verificar se já existe uma associação com a entrega específica
                        var association = entregadorEntregaAssociations.FirstOrDefault(e => e.FkEntregador == entregadorId && e.FkEntrega == entrega.Id);

                        if (association != null)
                        {
                            // Atualizar a associação existente
                            association.FkEntrega = entrega.Id;
                            var content = JsonContent.Create(association);
                            await ApiService.PutDataAsync<EntregadorEntrega>($"api/EntrEnt/entregador_entrega/{association.Id}", content);
                        }
                        else
                        {
                            // Verificar se já existe uma associação com o mesmo nome de entrega
                            var existingAssociation = entregadorEntregaAssociations.FirstOrDefault(e => e.FkEntregador == entregadorId && entregas.Any(ent => ent.Id == e.FkEntrega && ent.Nome == entregaNome));
                            if (existingAssociation != null)
                            {
                                // Atualizar a associação existente com o novo valor
                                existingAssociation.FkEntrega = entrega.Id;
                                var content = JsonContent.Create(existingAssociation);
                                await ApiService.PutDataAsync<EntregadorEntrega>($"api/EntrEnt/entregador_entrega/{existingAssociation.Id}", content);
                                ShowAlert($"Valor alterado com sucesso!", Color.Success);
                            }
                            else
                            {
                                // Adicionar nova associação
                                association = new EntregadorEntrega { FkEntregador = entregadorId, FkEntrega = entrega.Id };
                                entregadorEntregaAssociations.Add(association);
                                var content = JsonContent.Create(association);
                                await ApiService.PostDataAsync<EntregadorEntrega>("api/EntrEnt/entregador_entrega", content);
                                ShowAlert($"Valor registrado com sucesso!", Color.Success);
                            }
                        }
                    }
                }
                // Limpar as seleções após salvar
                selectedValues.Remove(entregadorId);
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Erro ao salvar preços!", Color.Danger);
        }
    }

    private bool IsSelected(int entregadorId, int entregaId)
    {
        var association = entregadorEntregaAssociations.FirstOrDefault(e => e.FkEntregador == entregadorId && e.FkEntrega == entregaId);
        return association != null;
    }

    private bool showAlert = false;
    private string alertMessage = string.Empty;
    private Color alertColor = Color.Primary;

    private void ShowAlert(string message, Color color)
    {
        alertMessage = message;
        alertColor = color;
        showAlert = true;
    }

    public class Entregador
    {
        public int Id { get; set; }
        public string? Nome { get; set; }
        public string? Sobrenome { get; set; }
        public string? Pix { get; set; }
        public bool Situacao { get; set; }
    }

    public class Entrega
    {
        public int Id { get; set; }
        public string? Nome { get; set; }
        public decimal Valor { get; set; }
        public bool Situacao { get; set; }
    }

    public class EntregadorEntrega
    {
        public int Id { get; set; }
        public int FkEntregador { get; set; }
        public int FkEntrega { get; set; }
    }
}
