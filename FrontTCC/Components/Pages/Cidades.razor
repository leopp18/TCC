@page "/cidades"
@rendermode InteractiveServer

@using Blazorise
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Cidades</PageTitle>

<h1>Cidades</h1>

<Alert @bind-Visible="showAlert" Color="@alertColor">
    @alertMessage
    <CloseButton />
</Alert>

@if (permissao == "1")
{
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-success" @onclick="ShowNewCityModal"><i class="bi bi-plus-circle"></i></button>
    </div>

    <Table Striped Bordered>
        <TableHeader ThemeContrast="ThemeContrast.Dark">
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Nome</TableHeaderCell>
                <TableHeaderCell>Estado</TableHeaderCell>
                <TableHeaderCell>Status</TableHeaderCell>
                <TableHeaderCell>Operações</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @if (cidades != null)
            {
                int rowIndex = 1;
                @foreach (var cidade in cidades)
                {
                    <tr>
                        <td><strong>@rowIndex</strong></td>
                        <td>@cidade.Nome</td>
                        <td>@cidade.Estado?.Sigla</td>
                        <td>@(cidade.Situacao ? "Ativo" : "Inativo")</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => ShowEditCityModal(cidade)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-danger btn-sm" @onclick="() => OnDeleteClicked(cidade.Id)"><i class="bi bi-trash"></i></button>
                        </td>
                    </tr>
                    rowIndex++;
                }
            }
        </TableBody>
    </Table>

    <Modal @bind-Visible="showNewCityModal">
        <ModalBackdrop />
        <ModalContent>
            <ModalHeader>
                <ModalTitle>@(isEditMode ? "Editar Cidade" : "Nova Cidade")</ModalTitle>
                <Button CloseButton @onclick="HideNewCityModal" />
            </ModalHeader>
            <ModalBody>
                <div class="form-group">
                    <label for="nome">Nome</label>
                    <input type="text" class="form-control" id="nome" @bind="newCity.Nome" />
                </div>
                <div class="form-group">
                    <label for="estado">Estado</label>
                    <select class="form-control" id="estado" @bind="newCity.FkEstado">
                        <option value="">Selecione um estado</option>
                        @foreach (var estado in estados)
                        {
                            <option value="@estado.Id">@estado.Nome</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <br/>
                    <label for="status">Status</label>
                    <Select @bind-SelectedValue="@newCity.Situacao">
                        <SelectItem Value="true">Ativo</SelectItem>
                        <SelectItem Value="false">Inativo</SelectItem>
                    </Select>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" @onclick="SaveNewCity">Salvar</Button>
                <Button Color="Color.Secondary" @onclick="HideNewCityModal">Cancelar</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}
else
{
    <p>Você não tem permissão para acessar esta página.</p>
}

@code {
    private bool showNewCityModal = false;
    private bool isEditMode = false;
    private List<Cidade> cidades = new List<Cidade>();
    private List<Estado> estados = new List<Estado>();
    private Cidade newCity = new Cidade();
    private string token = string.Empty;
    private string permissao = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Obtenha a permissão do usuário a partir das claims
            permissao = user.FindFirst(c => c.Type == "permissao")?.Value;

            if (permissao == "1")
            {
                await LoadEstados();
                await LoadCidades();
            }

            StateHasChanged(); // Força a atualização do componente após a inicialização
        }
    }

    private async Task LoadCidades()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7083/api/Cidade/cidades");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var cidadesResponse = await response.Content.ReadFromJsonAsync<List<Cidade>>() ?? new List<Cidade>();

            // Associar estados às cidades
            foreach (var cidade in cidadesResponse)
            {
                cidade.Estado = estados.FirstOrDefault(e => e.Id == cidade.FkEstado);
                if (cidade.Estado == null)
                {
                    Console.WriteLine($"Estado não encontrado para a cidade: {cidade.Nome} (EstadoId: {cidade.FkEstado})");
                }
                else
                {
                    Console.WriteLine($"Cidade: {cidade.Nome}, Estado: {cidade.Estado.Nome}");
                }
            }

            cidades = cidadesResponse;
        }
        catch (Exception ex)
        {
            ShowAlert("Erro ao carregar cidades", Color.Danger);
            Console.WriteLine($"Erro ao carregar cidades: {ex.Message}");
        }
    }

    private async Task LoadEstados()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7083/api/Estado/estados");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();
            estados = await response.Content.ReadFromJsonAsync<List<Estado>>() ?? new List<Estado>();
        }
        catch (Exception ex)
        {
            ShowAlert("Erro ao carregar estados", Color.Danger);
            Console.WriteLine($"Erro ao carregar estados: {ex.Message}");
        }
    }

    private void ShowNewCityModal()
    {
        newCity = new Cidade();
        isEditMode = false;
        showNewCityModal = true;
    }

    private void ShowEditCityModal(Cidade cidade)
    {
        newCity = new Cidade
        {
            Id = cidade.Id,
            Nome = cidade.Nome,
            FkEstado = cidade.FkEstado,
            Situacao = cidade.Situacao
        };
        isEditMode = true;
        showNewCityModal = true;
    }

    private void HideNewCityModal()
    {
        showNewCityModal = false;
    }

    private async Task SaveNewCity()
    {
        try
        {
            var request = new HttpRequestMessage(isEditMode ? HttpMethod.Put : HttpMethod.Post, 
                isEditMode ? $"https://localhost:7083/api/Cidade/cidades/{newCity.Id}" : "https://localhost:7083/api/Cidade/cidades");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            request.Content = JsonContent.Create(newCity);

            var response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            ShowAlert(isEditMode ? "Cidade alterada com sucesso!" : "Cidade cadastrada com sucesso!", Color.Success);
            await LoadCidades();
            showNewCityModal = false;
        }
        catch (Exception ex)
        {
            ShowAlert("Erro ao salvar cidade!", Color.Danger);
            Console.WriteLine($"Erro ao salvar cidade: {ex.Message}");
        }
    }

    private async Task OnDeleteClicked(int id)
    {
        try
        {
            // Encontrar a cidade pelo ID
            var cidade = cidades.FirstOrDefault(c => c.Id == id);
            if (cidade != null)
            {
                // Atualizar o status da cidade para inativo
                cidade.Situacao = false;
                var request = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7083/api/Cidade/cidades/{cidade.Id}");
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                request.Content = JsonContent.Create(cidade);

                var response = await Http.SendAsync(request);
                response.EnsureSuccessStatusCode();

                await LoadCidades();
                ShowAlert("Cidade inativada com sucesso!", Color.Success);
            }
            else
            {
                ShowAlert("Erro ao inativar cidade!", Color.Danger);
                Console.WriteLine($"Cidade com ID: {id} não encontrada.");
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Erro ao inativar cidade!", Color.Danger);
            Console.WriteLine($"Erro ao marcar cidade como inativa: {ex.Message}");
        }
    }

    private bool showAlert = false;
    private string alertMessage = string.Empty;
    private Color alertColor = Color.Primary;

    private void ShowAlert(string message, Color color)
    {
        alertMessage = message;
        alertColor = color;
        showAlert = true;
    }

    public class Cidade
    {
        public int Id { get; set; }
        public string? Nome { get; set; }
        public int FkEstado { get; set; }
        public Estado? Estado { get; set; }
        public bool Situacao { get; set; }
    }

    public class Estado
    {
        public int Id { get; set; }
        public string? Nome { get; set; }
        public string? Sigla { get; set; }
    }
}
