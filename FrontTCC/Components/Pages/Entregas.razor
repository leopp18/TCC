@page "/tipos-de-entrega"
@rendermode InteractiveServer

@using Blazorise
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject IJSRuntime JS
@inject ApiService ApiService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Tipos de Entrega</PageTitle>

<h1>Tipos de Entrega</h1>

<Alert @bind-Visible="showAlert" Color="@alertColor">
    @alertMessage
    <CloseButton />
</Alert>

@if (permissao == "1")
{
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-success" @onclick="ShowNewEntregaModal"><i class="bi bi-plus-circle"></i></button>
    </div>

    <Table Striped Bordered>
        <TableHeader ThemeContrast="ThemeContrast.Dark">
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Nome</TableHeaderCell>
                <TableHeaderCell>Valor</TableHeaderCell>
                <TableHeaderCell>Status</TableHeaderCell>
                <TableHeaderCell>Operações</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @if (entregas != null)
            {
                int index = 1;
                @foreach (var entrega in entregas)
                {
                    <tr>
                        <td><strong>@index</strong></td>
                        <td>@entrega.Nome</td>
                        <td>@entrega.Valor.ToString("C")</td>
                        <td>@(entrega.Situacao ? "Ativo" : "Inativo")</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => ShowEditEntregaModal(entrega)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-danger btn-sm" @onclick="() => OnDeleteClicked(entrega.Id)"><i class="bi bi-trash"></i></button>
                        </td>
                    </tr>
                    index++;
                }
            }
        </TableBody>
    </Table>

    <Modal @bind-Visible="showNewEntregaModal">
        <ModalBackdrop />
        <ModalContent>
            <ModalHeader>
                <ModalTitle>@(isEditMode ? "Editar Entrega" : "Nova Entrega")</ModalTitle>
                <Button CloseButton @onclick="HideNewEntregaModal" />
            </ModalHeader>
            <ModalBody>
                <div class="form-group">
                    <label for="nome">Nome</label>
                    <input type="text" class="form-control" id="nome" @bind="newEntrega.Nome" />
                </div>
                <div class="form-group">
                    <label for="valor">Valor</label>
                    <input type="number" class="form-control" id="valor" @bind="newEntrega.Valor" />
                </div>
                <div class="form-group">
                    <br/>
                    <label for="status">Status</label>
                    <Select @bind-SelectedValue="@newEntrega.Situacao">
                        <SelectItem Value="true">Ativo</SelectItem>
                        <SelectItem Value="false">Inativo</SelectItem>
                    </Select>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" @onclick="SaveNewEntrega">Salvar</Button>
                <Button Color="Color.Secondary" @onclick="HideNewEntregaModal">Cancelar</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}
else
{
    <p>Você não tem permissão para acessar esta página.</p>
}

@code {
    private bool showNewEntregaModal = false;
    private bool isEditMode = false;
    private List<Entrega> entregas = new List<Entrega>();
    private Entrega newEntrega = new Entrega();
    private string token = string.Empty;
    private string permissao = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Obtenha a permissão do usuário a partir das claims
            permissao = user.FindFirst(c => c.Type == "permissao")?.Value;

            if (permissao == "1")
            {
                await LoadEntregas();
            }

            StateHasChanged(); // Força a atualização do componente após a inicialização
        }
    }

    private async Task LoadEntregas()
    {
        try
        {
            entregas = await ApiService.GetDataAsync<List<Entrega>>("api/Entrega/entregas", token) ?? new List<Entrega>();
            entregas = entregas.OrderBy(e => e.Nome).ThenBy(e => e.Valor).ToList();
        }
        catch (Exception)
        {
            ShowAlert("Erro ao carregar entregas", Color.Danger);
        }
    }

    private void ShowNewEntregaModal()
    {
        newEntrega = new Entrega();
        isEditMode = false;
        showNewEntregaModal = true;
    }

    private void ShowEditEntregaModal(Entrega entrega)
    {
        newEntrega = new Entrega
        {
            Id = entrega.Id,
            Nome = entrega.Nome,
            Valor = entrega.Valor,
            Situacao = entrega.Situacao
        };
        isEditMode = true;
        showNewEntregaModal = true;
    }

    private void HideNewEntregaModal()
    {
        showNewEntregaModal = false;
    }

    private async Task SaveNewEntrega()
    {
        try
        {
            if (isEditMode)
            {
                await ApiService.PutDataAsync<Entrega>($"api/Entrega/entregas/{newEntrega.Id}", JsonContent.Create(newEntrega), token);
                ShowAlert("Entrega alterada com sucesso!", Color.Success);
            }
            else
            {
                await ApiService.PostDataAsync<Entrega>("api/Entrega/entregas", JsonContent.Create(newEntrega), token);
                ShowAlert("Entrega cadastrada com sucesso!", Color.Success);
            }

            await LoadEntregas();
            showNewEntregaModal = false;
        }
        catch (Exception)
        {
            ShowAlert("Erro ao salvar entrega!", Color.Danger);
        }
    }

    private async Task OnDeleteClicked(int id)
    {
        try
        {
            var entrega = entregas.FirstOrDefault(e => e.Id == id);
            if (entrega != null)
            {
                entrega.Situacao = false;
                await ApiService.PutDataAsync<Entrega>($"api/Entrega/entregas/{entrega.Id}", JsonContent.Create(entrega), token);

                await LoadEntregas();
                ShowAlert("Entrega inativada com sucesso!", Color.Success);
            }
            else
            {
                ShowAlert("Erro ao inativar entrega!", Color.Danger);
            }
        }
        catch (Exception)
        {
            ShowAlert("Erro ao inativar entrega!", Color.Danger);
        }
    }

    private string alertMessage;
    private Color alertColor;
    private bool showAlert;

    private void ShowAlert(string message, Color color)
    {
        alertMessage = message;
        alertColor = color;
        showAlert = true;
    }

    public class Entrega
    {
        public int Id { get; set; }
        public string? Nome { get; set; }
        public decimal Valor { get; set; }
        public bool Situacao { get; set; }
    }
}
