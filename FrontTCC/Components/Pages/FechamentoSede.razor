@page "/fechamento-sede"
@rendermode InteractiveServer

@inject IJSRuntime JS
@inject HttpClient Http

<PageTitle>Fechamento Sede</PageTitle>

<h1>Fechamento Sede</h1>

<EditForm Model="@filtro" OnValidSubmit="BuscarPagamentos">
    <div class="form-row d-flex justify-content-between">
        <div class="form-group col-md-3 d-flex align-items-center">
            <label class="mr-2">Quinzena:</label>
            <div>
                <RadioGroup TValue="int" Name="quinzena">
                    <Radio Value="@(1)">1ª quinzena</Radio>
                    <Radio Value="@(2)">2ª quinzena</Radio>
                </RadioGroup>
            </div>
        </div>
        <div class="form-group col-md-3 d-flex align-items-center">
            <label class="mr-2">Mês:</label>
            <InputSelect @bind-Value="filtro.Mes">
                <option value="1">Janeiro</option>
                <option value="2">Fevereiro</option>
                <option value="3">Março</option>
                <option value="4">Abril</option>
                <option value="5">Maio</option>
                <option value="6">Junho</option>
                <option value="7">Julho</option>
                <option value="8">Agosto</option>
                <option value="9">Setembro</option>
                <option value="10">Outubro</option>
                <option value="11">Novembro</option>
                <option value="12">Dezembro</option>
            </InputSelect>
        </div>
        <div class="form-group col-md-3 d-flex align-items-center">
            <label class="mr-2">Ano:</label>
            <InputSelect @bind-Value="filtro.Ano">
                @foreach (var ano in Enumerable.Range(2024, DateTime.Now.Year - 2023))
                {
                    <option value="@ano">@ano</option>
                }
            </InputSelect>
        </div>
        <div class="form-group col-md-3 align-self-end">
            <button type="submit" class="btn btn-primary">Buscar</button>
        </div>
    </div>
</EditForm>

<Table Striped Bordered>
    <TableHeader ThemeContrast="ThemeContrast.Dark">
        <TableRow>
            <TableHeaderCell class="id-coluna">#</TableHeaderCell>
            <TableHeaderCell class="nome-coluna">Nome</TableHeaderCell>
            <TableHeaderCell class="nome-coluna">Chave Pix</TableHeaderCell>
            <TableHeaderCell class="soma-coluna">Valor Bruto</TableHeaderCell>
            <TableHeaderCell class="soma-coluna">Desconto</TableHeaderCell>
            <TableHeaderCell class="soma-coluna">Adiantamento</TableHeaderCell>
            <TableHeaderCell class="soma-coluna">Adicional</TableHeaderCell>
            <TableHeaderCell class="soma-coluna">Valor Líquido</TableHeaderCell>
            <TableHeaderCell class="id-coluna">Envio</TableHeaderCell>
            <TableHeaderCell class="id-coluna">Operação</TableHeaderCell>
            <TableHeaderCell class="id-coluna">Pago</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @if (entregadores != null && pagamentos != null)
        {
            int rowIndex = 1;
            foreach (var entregador in entregadores)
            {
                var pagamento = pagamentos.FirstOrDefault(p => p.EntregadorId == entregador.Id) ?? new Pagamento
                            {
                                EntregadorId = entregador.Id,
                                Desconto = 0,
                                Adiantamento = 0,
                                Adicional = 0,
                                ValorLiquido = entregador.ValorBruto,
                                Pago = false
                            };

                <TableRow class="@GetRowClass(pagamento.Pago)">
                    <TableRowHeader class="id-coluna">@rowIndex</TableRowHeader>
                    <TableRowCell class="nome-coluna">@entregador.Nome @entregador.Sobrenome</TableRowCell>
                    <TableRowCell class="nome-coluna">@entregador.Pix</TableRowCell>
                    <TableRowCell class="soma-coluna">@entregador.ValorBruto</TableRowCell>
                    <TableRowCell class="soma-coluna">
                        <TextEdit Plaintext @bind-Value="pagamento.Desconto" @onchange="() => UpdateValorLiquido(pagamento, entregador)" />
                    </TableRowCell>
                    <TableRowCell class="soma-coluna">
                        <TextEdit Plaintext @bind-Value="pagamento.Adiantamento" @onchange="() => UpdateValorLiquido(pagamento, entregador)" />
                    </TableRowCell>
                    <TableRowCell class="soma-coluna">
                        <TextEdit Plaintext @bind-Value="pagamento.Adicional" @onchange="() => UpdateValorLiquido(pagamento, entregador)" />
                    </TableRowCell>
                    <TableRowCell class="soma-coluna">@pagamento.ValorLiquido</TableRowCell>
                    <TableRowCell class="id-coluna">
                        <button class="btn btn-success btn-sm"><i class="bi bi-whatsapp"></i></button>
                    </TableRowCell>
                    <TableRowCell class="id-coluna">
                        <button class="btn btn-secondary btn-sm" @onclick="() => copyText(entregador.Pix)"><i class="bi bi-clipboard"></i></button>
                    </TableRowCell>
                    <TableRowCell class="id-coluna">
                        <Check TValue="bool" Checked="@pagamento.Pago" CheckedChanged="@(value => OnPagoChanged(pagamento, value))"></Check>
                    </TableRowCell>
                </TableRow>
                rowIndex++;
            }
        }
    </TableBody>
</Table>


@code {
    private async Task copyText(string operacao)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", operacao);
    }

    private List<Entregador> entregadores;
    private List<Pagamento> pagamentos;

    private FiltroPagamento filtro = new FiltroPagamento
        {
            Quinzena = 1,
            Mes = DateTime.Now.Month,
            Ano = DateTime.Now.Year
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadEntregadores();
        await LoadPagamentos();
    }

    private async Task LoadEntregadores()
    {
        try
        {
            entregadores = await Http.GetFromJsonAsync<List<Entregador>>("https://localhost:7083/api/Entregador/entregadores") ?? new List<Entregador>();
        }
        catch (Exception ex)
        {
            // Adicionar um tratamento de erro adequado aqui
            Console.WriteLine($"Erro ao carregar entregadores: {ex.Message}");
        }
    }

    private async Task LoadPagamentos()
    {
        try
        {
            pagamentos = await Http.GetFromJsonAsync<List<Pagamento>>($"https://localhost:7083/api/Pagamento/pagamentos?quinzena={filtro.Quinzena}&mes={filtro.Mes}&ano={filtro.Ano}") ?? new List<Pagamento>();
        }
        catch (Exception ex)
        {
            // Adicionar um tratamento de erro adequado aqui
            Console.WriteLine($"Erro ao carregar pagamentos: {ex.Message}");
        }
    }

    private async Task BuscarPagamentos()
    {
        await LoadPagamentos();
    }

    private void OnPagoChanged(Pagamento pagamento, bool value)
    {
        pagamento.Pago = value;
        Http.PutAsJsonAsync($"https://localhost:7083/api/Pagamento/{pagamento.Id}", pagamento);
    }

    private string GetRowClass(bool pago)
    {
        return pago ? "table-secondary" : string.Empty;
    }

    private void UpdateValorLiquido(Pagamento pagamento, Entregador entregador)
    {
        pagamento.ValorLiquido = entregador.ValorBruto - pagamento.Desconto - pagamento.Adiantamento + pagamento.Adicional;
        Http.PutAsJsonAsync($"https://localhost:7083/api/Pagamento/{pagamento.Id}", pagamento);
    }

    public class Entregador
    {
        public int Id { get; set; }
        public string Nome { get; set; }
        public string Sobrenome { get; set; }
        public string Pix { get; set; }
        public decimal ValorBruto { get; set; }
        public bool Situacao { get; set; } // Mapeado para bit no banco de dados
    }

    public class Pagamento
    {
        public int Id { get; set; }
        public int EntregadorId { get; set; }
        public decimal Desconto { get; set; }
        public decimal Adiantamento { get; set; }
        public decimal Adicional { get; set; }
        public decimal ValorLiquido { get; set; }
        public bool Pago { get; set; }
    }

    public class FiltroPagamento
    {
        public int Quinzena { get; set; }
        public int Mes { get; set; }
        public int Ano { get; set; }
    }
}
