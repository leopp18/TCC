@page "/fechamento-sede"
@using System.Net
@using Microsoft.AspNetCore.Components.Authorization
@inject FrontTCC.Services.WhatsAppService WhatsAppService

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject HttpClient Http

<PageTitle>Fechamento Sede</PageTitle>

<h1>Fechamento Sede</h1>

<Alert @bind-Visible="showAlert" Color="@alertColor">
    @alertMessage
    <CloseButton />
</Alert>

@if (permissao == "1")
{
    <EditForm Model="filtroPagamento" OnValidSubmit="BuscarPagamentos">
        <div class="form-row d-flex justify-content-between">
            <div class="form-group col-md-3 d-flex align-items-center">
                <label class="mr-2"><strong>Quinzena:</strong></label>
                <div>
                    <RadioGroup TValue="int" @bind-CheckedValue="filtroPagamento.Quinzena">
                        <Radio Value="@(1)">1ª quinzena</Radio>
                        <Radio Value="@(2)">2ª quinzena</Radio>
                    </RadioGroup>
                </div>
            </div>
            <div class="form-group col-md-3 d-flex align-items-center">
                <label class="mr-2"><strong>Mês:</strong></label>
                <InputSelect @bind-Value="filtroPagamento.Mes">
                    <option value="1">Janeiro</option>
                    <option value="2">Fevereiro</option>
                    <option value="3">Março</option>
                    <option value="4">Abril</option>
                    <option value="5">Maio</option>
                    <option value="6">Junho</option>
                    <option value="7">Julho</option>
                    <option value="8">Agosto</option>
                    <option value="9">Setembro</option>
                    <option value="10">Outubro</option>
                    <option value="11">Novembro</option>
                    <option value="12">Dezembro</option>
                </InputSelect>
            </div>
            <div class="form-group col-md-3 d-flex align-items-center">
                <label class="mr-2"><strong>Ano:</strong></label>
                <InputSelect @bind-Value="filtroPagamento.Ano">
                    @foreach (var ano in Enumerable.Range(2024, DateTime.Now.Year - 2023))
                    {
                        <option value="@ano">@ano</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group col-md-3 align-self-end">
                <button type="submit" class="btn btn-primary">Buscar</button>
            </div>
        </div>
    </EditForm>
    <br />
    <Table Striped Bordered>
        <TableHeader ThemeContrast="ThemeContrast.Dark">
            <TableRow>
                <TableHeaderCell class="id-coluna">#</TableHeaderCell>
                <TableHeaderCell class="nome-coluna">Nome</TableHeaderCell>
                <TableHeaderCell class="nome-coluna">Chave Pix</TableHeaderCell>
                <TableHeaderCell class="soma-coluna">Valor Bruto</TableHeaderCell>
                <TableHeaderCell class="soma-coluna">Desconto</TableHeaderCell>
                <TableHeaderCell class="soma-coluna">Adiantamento</TableHeaderCell>
                <TableHeaderCell class="soma-coluna">Adicional</TableHeaderCell>
                <TableHeaderCell class="soma-coluna">Valor Líquido</TableHeaderCell>
                <TableHeaderCell class="id-coluna">Envio</TableHeaderCell>
                <TableHeaderCell class="id-coluna">Nota Fiscal</TableHeaderCell>
                <TableHeaderCell class="id-coluna">Operação</TableHeaderCell>
                <TableHeaderCell class="id-coluna">Pago</TableHeaderCell> 
            </TableRow>
        </TableHeader>
        <TableBody>
            @if (pagamentos != null && pagamentos.Any())
            {
                int rowIndex = 1;
                foreach (var pagamento in pagamentos)
                {
                    var entregador = entregadores.FirstOrDefault(e => e.Id == pagamento.FkEntregador);
                    if (entregador == null) continue;

                    decimal valorBruto = CalcularValorBruto(entregador.Id, pagamento.Periodo);
                    decimal valorLiquido = valorBruto - pagamento.Desconto.GetValueOrDefault() - pagamento.Adiantamento.GetValueOrDefault() + pagamento.Adicional.GetValueOrDefault();

                    <tr class="@GetRowClass(pagamento.Pago)">
                        <td class="id-coluna"><strong>@rowIndex</strong></td>
                        <td class="nome-coluna">@entregador.Nome @entregador.Sobrenome</td>
                        <td class="nome-coluna">@entregador.Pix</td>
                        <td class="soma-coluna">@valorBruto.ToString("C")</td>
                        <td class="soma-coluna">
                            <NumericEdit Plaintext @bind-Value="pagamento.Desconto" @onchange="() => UpdateValorLiquido(pagamento, entregador)" />
                        </td>
                        <td class="soma-coluna">
                            <NumericEdit Plaintext @bind-Value="pagamento.Adiantamento" @onchange="() => UpdateValorLiquido(pagamento, entregador)"  />
                        </td>
                        <td class="soma-coluna">
                            <NumericEdit Plaintext @bind-Value="pagamento.Adicional" @onchange="() => UpdateValorLiquido(pagamento, entregador)" />
                        </td>
                        <td class="soma-coluna">@valorLiquido.ToString("C")</td>
                        <td class="id-coluna">
                            <button class="btn btn-success btn-sm" @onclick="() => EnviarMensagemWhatsApp(entregador)">
                                <i class="bi bi-whatsapp"></i>
                            </button>
                        </td>
                        <td class="id-coluna">
                            <Check TValue="bool" Checked="@pagamento.NotaFiscal" CheckedChanged="@(value => OnNotaFiscalChanged(pagamento, value))"></Check>
                        </td>
                        <td class="id-coluna">
                            <button class="btn btn-secondary btn-sm" @onclick="() => copyText(entregador.Pix)"><i class="bi bi-clipboard"></i></button>
                        </td>
                        <td class="id-coluna">
                            <Check TValue="bool" Checked="@pagamento.Pago" CheckedChanged="@(value => OnPagoChanged(pagamento, value))"></Check>
                        </td>
                    </tr>
                    rowIndex++;
                }
                <tr>
                    <td colspan="3"><strong>Total</strong></td>
                    <td class="soma-coluna"><strong>@pagamentos.Sum(p => CalcularValorBruto(p.FkEntregador, p.Periodo)).ToString("C")</strong></td>
                    <td class="soma-coluna"><strong>@pagamentos.Sum(p => p.Desconto.GetValueOrDefault()).ToString("C")</strong></td>
                    <td class="soma-coluna"><strong>@pagamentos.Sum(p => p.Adiantamento.GetValueOrDefault()).ToString("C")</strong></td>
                    <td class="soma-coluna"><strong>@pagamentos.Sum(p => p.Adicional.GetValueOrDefault()).ToString("C")</strong></td>
                    <td class="soma-coluna"><strong>@pagamentos.Sum(p => p.ValorLiquido).ToString("C")</strong></td>
                    <td colspan="5"></td>
                </tr>
            }
        </TableBody>
    </Table>
}
else
{
    <p>Você não tem permissão para acessar esta página.</p>
}


@code {
    private List<Entregador> entregadores;
    private List<Pagamento> pagamentos;
    private string token = string.Empty;
    private string permissao = string.Empty;

    private FiltroPagamento filtroPagamento = new FiltroPagamento();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Obtenha a permissão do usuário a partir das claims
            permissao = user.FindFirst(c => c.Type == "permissao")?.Value;

            if (permissao == "1")
            {
                await LoadEntregadores();
                await LoadPagamentos();
            }

            StateHasChanged(); // Força a atualização do componente após a inicialização
        }
    }

    private async Task LoadEntregadores()
    {
        try
        {
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7083/api/Entregador/entregadores");
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {
                entregadores = await response.Content.ReadFromJsonAsync<List<Entregador>>() ?? new List<Entregador>();
            }
        }
        catch (Exception ex)
        {
            // Adicionar um tratamento de erro adequado aqui
            Console.WriteLine($"Erro ao carregar entregadores: {ex.Message}");
        }
    }

    private async Task LoadPagamentos()
    {
        try
        {
            // Calcular a data correta com base na quinzena, mês e ano selecionados
            DateTime data;
            if (filtroPagamento.Quinzena == 1)
            {
                data = new DateTime(filtroPagamento.Ano, filtroPagamento.Mes, 1);
            }
            else
            {
                data = new DateTime(filtroPagamento.Ano, filtroPagamento.Mes, 16);
            }

            // Fazer a requisição para a API com o parâmetro de data
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7083/api/Pagamento/pagamentos/{data.ToString("yyyy-MM-dd")}");
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {
                pagamentos = await response.Content.ReadFromJsonAsync<List<Pagamento>>() ?? new List<Pagamento>();

                foreach (var pagamento in pagamentos)
                {
                    if (pagamento.Adiantamento.HasValue)
                    {
                        pagamento.Adiantamento = decimal.Round(pagamento.Adiantamento.Value, 2);
                    }
                    if (pagamento.Adicional.HasValue)
                    {
                        pagamento.Adicional = decimal.Round(pagamento.Adicional.Value, 2);
                    }
                    if (pagamento.Desconto.HasValue)
                    {
                        pagamento.Desconto = decimal.Round(pagamento.Desconto.Value, 2);
                    }
                    var entregador = entregadores.FirstOrDefault(e => e.Id == pagamento.FkEntregador);
                    if (entregador != null)
                    {
                        UpdateValorLiquido(pagamento, entregador);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Erro ao carregar pagamentos", Color.Danger);
            Console.WriteLine($"Erro ao carregar pagamentos: {ex.Message}");
        }
    }

    private async Task BuscarPagamentos()
    {
        await LoadPagamentos();
    }

    private async Task EnviarMensagemWhatsApp(Entregador entregador)
    {
        if (entregador != null && !string.IsNullOrWhiteSpace(entregador.Celular))
        {
            try
            {
                var pagamento = pagamentos.FirstOrDefault(p => p.FkEntregador == entregador.Id);
                if (pagamento == null) return;

                decimal valorBruto = CalcularValorBruto(entregador.Id, pagamento.Periodo);
                decimal valorLiquido = valorBruto - pagamento.Desconto.GetValueOrDefault() - pagamento.Adiantamento.GetValueOrDefault() + pagamento.Adicional.GetValueOrDefault();

                string mensagem = $"Olá {entregador.Nome}! Segue fechamento referente a {filtroPagamento.Quinzena}ª quinzena de {filtroPagamento.Mes}/{filtroPagamento.Ano}\n\n" +
                                  $"Valor Bruto: {valorBruto:C}\n" +
                                  $"Desconto: {pagamento.Desconto.GetValueOrDefault():C}\n" +
                                  $"Adiantamento: {pagamento.Adiantamento.GetValueOrDefault():C}\n" +
                                  $"Adicional: {pagamento.Adicional.GetValueOrDefault():C}\n" +
                                  $"Valor Líquido: *{valorLiquido:C}*";

                await WhatsAppService.OpenWhatsAppChat(entregador.Celular, mensagem);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao enviar mensagem: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Número de telefone inválido ou entregador nulo.");
        }
    }

    private async Task copyText(string operacao)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", operacao);
    }

    private void OnPagoChanged(Pagamento pagamento, bool value)
    {
        pagamento.Pago = value;
        var requestMessage = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7083/api/Pagamento/pagamentos/{pagamento.Id}");
        requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        requestMessage.Content = JsonContent.Create(pagamento);
        Http.SendAsync(requestMessage);
    }

    private void OnNotaFiscalChanged(Pagamento pagamento, bool value)
    {
        pagamento.NotaFiscal = value;
        var requestMessage = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7083/api/Pagamento/pagamentos/{pagamento.Id}");
        requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        requestMessage.Content = JsonContent.Create(pagamento);
        Http.SendAsync(requestMessage);
    }

    private string GetRowClass(bool pago)
    {
        return pago ? "linha-paga" : string.Empty;
    }

    private void UpdateValorLiquido(Pagamento pagamento, Entregador entregador)
    {
        decimal valorBruto = CalcularValorBruto(entregador.Id, pagamento.Periodo);
        pagamento.ValorLiquido = valorBruto - pagamento.Desconto.GetValueOrDefault() - pagamento.Adiantamento.GetValueOrDefault() + pagamento.Adicional.GetValueOrDefault();
        var requestMessage = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7083/api/Pagamento/pagamentos/{pagamento.Id}");
        requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        requestMessage.Content = JsonContent.Create(pagamento);
        Http.SendAsync(requestMessage);
    }

    private decimal CalcularValorBruto(int entregadorId, DateOnly periodo)
    {
        decimal valorBruto = 0;

        // Obter os pagamentos do entregador para o período especificado
        var requestPagamentos = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7083/api/Pagamento/pagamentos/{periodo.ToString("yyyy-MM-dd")}/{entregadorId}");
        requestPagamentos.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var responsePagamentos = Http.SendAsync(requestPagamentos).Result;

        if (responsePagamentos.StatusCode == HttpStatusCode.NotFound)
        {
            // throw new Exception("Pagamentos não encontrados para o entregador e período especificados.");
            return valorBruto;
        }

        var pagamentos = responsePagamentos.Content.ReadFromJsonAsync<List<Pagamento>>().Result;

        // Verificar se pagamentos é nulo
        if (pagamentos == null)
        {
            return valorBruto;
        }

        foreach (var pagamento in pagamentos)
        {
            // Obter as quantidades da tabela PagamentoEntrega para cada pagamento
            var requestPagamentoEntregas = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7083/api/PagEnt/pagamentoentrega/pagamento/{pagamento.Id}");
            requestPagamentoEntregas.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var responsePagamentoEntregas = Http.SendAsync(requestPagamentoEntregas).Result;

            if (responsePagamentoEntregas.StatusCode == HttpStatusCode.NotFound)
            {
                // throw new Exception("PagamentoEntrega não encontrado para o pagamento especificado.");
                return valorBruto;
            }

            var pagamentoEntregas = responsePagamentoEntregas.Content.ReadFromJsonAsync<List<PagamentoEntrega>>().Result;

            foreach (var pagamentoEntrega in pagamentoEntregas)
            {
                // Obter o valor da entrega da tabela Entrega
                var requestEntrega = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7083/api/Entrega/entregas/id/{pagamentoEntrega.FkEntrega}");
                requestEntrega.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var responseEntrega = Http.SendAsync(requestEntrega).Result;

                if (responseEntrega.StatusCode == HttpStatusCode.NotFound)
                {
                    // throw new Exception("Entrega não encontrada para o ID especificado.");
                    return valorBruto;
                }

                var entrega = responseEntrega.Content.ReadFromJsonAsync<Entrega>().Result;

                if (entrega != null)
                {
                    valorBruto += pagamentoEntrega.Quantidade * entrega.Valor;
                }
            }
        }

        return valorBruto;
    }

    private bool showAlert = false;
    private string alertMessage = string.Empty;
    private Color alertColor = Color.Primary;

    private void ShowAlert(string message, Color color)
    {
        alertMessage = message;
        alertColor = color;
        showAlert = true;
    }

    public class Entregador
    {
        public int Id { get; set; }
        public string Nome { get; set; }
        public string? Sobrenome { get; set; }
        public string? Pix { get; set; }
        public string? Celular { get; set; }
        public bool Situacao { get; set; } // Mapeado para bit no banco de dados
    }

    public class Pagamento
    {
        public int Id { get; set; }
        public decimal? Adicional { get; set; }
        public decimal? Desconto { get; set; }
        public decimal? Adiantamento { get; set; }
        public bool Pago { get; set; }
        public bool NotaFiscal { get; set; }
        public int FkCidade { get; set; }
        public int FkEntregador { get; set; }
        public DateOnly Periodo { get; set; }
        public decimal ValorLiquido { get; set; }
    }

    public class PagamentoEntrega
    {
        public int Id { get; set; }
        public int FkEntrega { get; set; }
        public int FkPagamento { get; set; }
        public int Quantidade { get; set; }
        public DateOnly Periodo { get; set; }
    }

    public class EntregadorEntrega
    {
        public int Id { get; set; }
        public int FkEntregador { get; set; }
        public int FkEntrega { get; set; }
        public decimal Valor { get; set; }
    }

    public class Entrega
    {
        public int Id { get; set; }
        public decimal Valor { get; set; }
    }

    public class FiltroPagamento
    {
        public int Quinzena { get; set; } = 1;
        public int Mes { get; set; } = DateTime.Now.Month;
        public int Ano { get; set; } = DateTime.Now.Year;
    }
}
