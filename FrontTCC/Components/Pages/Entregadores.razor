@page "/entregadores"
@rendermode InteractiveServer

@using Blazorise
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject IJSRuntime JS
@inject ApiService ApiService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Entregadores</PageTitle>

<h1>Entregadores</h1>

<Alert @bind-Visible="showAlert" Color="@alertColor">
    @alertMessage
    <CloseButton />
</Alert>

@if (permissao == "1")
{
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-success" @onclick="ShowNewDeliveryPersonModal"><i class="bi bi-person-plus"></i></button>
    </div>

    <Table Striped Bordered>
        <TableHeader ThemeContrast="ThemeContrast.Dark">
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Nome</TableHeaderCell>
                <TableHeaderCell>Sobrenome</TableHeaderCell>
                <TableHeaderCell>Pix</TableHeaderCell>
                <TableHeaderCell>Celular</TableHeaderCell> 
                <TableHeaderCell>Status</TableHeaderCell>
                <TableHeaderCell>Operações</TableHeaderCell> 
            </TableRow>
        </TableHeader>
        <TableBody>
            @if (entregadores != null)
            {
                int rowIndex = 1;
                @foreach (var entregador in entregadores)
                {
                    <tr>
                        <td><strong>@rowIndex</strong></td>
                        <td>@entregador.Nome</td>
                        <td>@entregador.Sobrenome</td>
                        <td>@entregador.Pix</td>
                        <td>@FormatPhoneNumberForDisplay(entregador.Celular)</td> 
                        <td>@(entregador.Situacao ? "Ativo" : "Inativo")</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => ShowEditDeliveryPersonModal(entregador)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-danger btn-sm" @onclick="() => OnDeleteClicked(entregador.Id)"><i class="bi bi-trash"></i></button>
                        </td>
                    </tr>
                    rowIndex++;
                }
            }
        </TableBody>
    </Table>

    <Modal @bind-Visible="showNewDeliveryPersonModal">
        <ModalBackdrop />
        <ModalContent>
            <ModalHeader>
                <ModalTitle>@(isEditMode ? "Editar Entregador" : "Novo Entregador")</ModalTitle>
                <Button CloseButton @onclick="HideNewDeliveryPersonModal" />
            </ModalHeader>
            <ModalBody>
                <div class="form-group">
                    <label for="nome">Nome</label>
                    <input type="text" class="form-control" id="nome" @bind="newEntregador.Nome" />
                </div>
                <div class="form-group">
                    <label for="sobrenome">Sobrenome</label>
                    <input type="text" class="form-control" id="sobrenome" @bind="newEntregador.Sobrenome" />
                </div>
                <div class="form-group">
                    <label for="pix">Pix</label>
                    <input type="text" class="form-control" id="pix" @bind="newEntregador.Pix" />
                </div>
                <div class="form-group">
                    <label for="celular">Celular</label>
                    <input type="text" class="form-control" id="celular" @bind="newEntregador.Celular"  />
                </div>
                <div class="form-group">
                    <label for="status">Status</label>
                    <Select @bind-SelectedValue="@newEntregador.Situacao">
                        <SelectItem Value="true">Ativo</SelectItem>
                        <SelectItem Value="false">Inativo</SelectItem>
                    </Select>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" @onclick="SaveNewDeliveryPerson">Salvar</Button>
                <Button Color="Color.Secondary" @onclick="HideNewDeliveryPersonModal">Cancelar</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}
else
{
    <p>Você não tem permissão para acessar esta página.</p>
}

@code {
    private bool showNewDeliveryPersonModal = false;
    private bool isEditMode = false;
    private List<Entregador> entregadores = new List<Entregador>();
    private Entregador newEntregador = new Entregador();
    private string token = string.Empty;
    private string permissao = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Obtenha a permissão do usuário a partir das claims
            permissao = user.FindFirst(c => c.Type == "permissao")?.Value;

            if (permissao == "1")
            {
                await LoadEntregadores();
            }

            StateHasChanged(); // Força a atualização do componente após a inicialização
        }
    }

    private async Task LoadEntregadores()
    {
        try
        {
            entregadores = await ApiService.GetDataAsync<List<Entregador>>("api/Entregador/entregadores") ?? new List<Entregador>();
            entregadores = entregadores.OrderBy(e => e.Nome).ToList();
        }
        catch (Exception)
        {
            ShowAlert("Erro ao carregar entregadores", Color.Danger);
        }
    }

    private Task ShowNewDeliveryPersonModal()
    {
        newEntregador = new Entregador();
        isEditMode = false;
        showNewDeliveryPersonModal = true;
        return Task.CompletedTask;
    }

    private Task ShowEditDeliveryPersonModal(Entregador entregador)
    {
        newEntregador = new Entregador
        {
            Id = entregador.Id,
            Nome = entregador.Nome,
            Sobrenome = entregador.Sobrenome,
            Pix = entregador.Pix,
            Celular = FormatPhoneNumberForDisplay(entregador.Celular),
            Situacao = entregador.Situacao
        };
        isEditMode = true;
        showNewDeliveryPersonModal = true;
        return Task.CompletedTask;
    }

    private Task HideNewDeliveryPersonModal()
    {
        showNewDeliveryPersonModal = false;
        return Task.CompletedTask;
    }

    private async Task SaveNewDeliveryPerson()
    {
        try
        {
            // Remover a máscara do número de celular
            newEntregador.Celular = newEntregador.Celular != null ? new string(newEntregador.Celular.Where(char.IsDigit).ToArray()) : string.Empty;

            if (isEditMode)
            {
                await ApiService.PutDataAsync<Entregador>($"api/Entregador/entregadores/{newEntregador.Id}", JsonContent.Create(newEntregador));
                ShowAlert("Entregador alterado com sucesso!", Color.Success);
            }
            else
            {
                await ApiService.PostDataAsync<Entregador>("api/Entregador/entregadores", JsonContent.Create(newEntregador));
                ShowAlert("Entregador cadastrado com sucesso!", Color.Success);
            }

            await LoadEntregadores();
            showNewDeliveryPersonModal = false;
        }
        catch (Exception)
        {
            ShowAlert($"Erro ao salvar entregador", Color.Danger);
        }
    }

    private async Task OnDeleteClicked(int id)
    {
        try
        {
            var entregador = entregadores.FirstOrDefault(e => e.Id == id);
            if (entregador != null)
            {
                entregador.Situacao = false;
                await ApiService.PutDataAsync<Entregador>($"api/Entregador/entregadores/{entregador.Id}", JsonContent.Create(entregador));

                await LoadEntregadores();
                ShowAlert("Entregador inativado com sucesso!", Color.Success);
            }
            else
            {
                ShowAlert("Erro ao inativar entregador!", Color.Danger);
            }
        }
        catch (Exception)
        {
            ShowAlert("Erro ao inativar entregador!", Color.Danger);
        }
    }

    private string FormatPhoneNumberForDisplay(string? phoneNumber)
    {
        if (string.IsNullOrEmpty(phoneNumber))
        {
            return string.Empty;
        }

        var input = new string(phoneNumber.Where(char.IsDigit).ToArray());

        if (input.Length > 11)
            input = input.Substring(0, 11);

        if (input.Length > 7)
            return $"{input.Substring(0, 2)} {input.Substring(2, 5)}-{input.Substring(7)}";
        else if (input.Length > 2)
            return $"{input.Substring(0, 2)} {input.Substring(2)}";

        return input;
    }

    private bool showAlert = false;
    private string alertMessage = string.Empty;
    private Color alertColor = Color.Primary;

    private void ShowAlert(string message, Color color)
    {
        alertMessage = message;
        alertColor = color;
        showAlert = true;
    }

    public class Entregador
    {
        public int Id { get; set; }
        public string? Nome { get; set; }
        public string? Sobrenome { get; set; }
        public string? Pix { get; set; }
        public string? Celular { get; set; }
        public bool Situacao { get; set; }
    }
}
